<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
    <display-name>Archetype Created Web Application</display-name>
    <!--spring 容器相关配置-->
    <!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
    <!-- 指定Spring Bean的配置文件所在目录。默认配置在WEB-INF目录下 -->
    <!-- 一切皆是spring的bean -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!--classpath路径 classpath针对resources文件夹类型目录-->
        <param-value>classpath:application-context.xml</param-value>
    </context-param>

    <!-- Creates the Spring Container shared by all Servlets and Filters -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--spring mvc配置-->
    <!--这里我们配置了一个名字为spring的servelt
    我们也可以改为任意名字,并且可以配置多个servlet,本质上就是web的一个servlet-->
    <servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
        <!-- 可以自定义servlet.xml配置文件的位置和名称，默认为WEB-INF目录下，名称为[<servlet-name>]-servlet.xml，如spring-servlet.xml
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring-servlet.xml</param-value>
        </init-param>
        -->
        <!--wensocket-->
        <async-supported>true</async-supported>
    </servlet>
    <!-- spring这个servlet 处理所有的请求-->
    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 字符集过滤强制转码 -->
    <filter>
        <filter-name>SetCharacterEncoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--wensocket-->
        <async-supported>true</async-supported>
    </filter>
    <filter-mapping>
        <filter-name>SetCharacterEncoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--自定义filter 测试 filter-->
    <filter>
        <filter-name>WebFilter</filter-name>
        <filter-class>com.qxd.birth.web.filter.WebFilter</filter-class>
        <!--wensocket-->
        <async-supported>true</async-supported>
    </filter>
    <filter-mapping>
        <filter-name>WebFilter</filter-name>
        <url-pattern>/web/*</url-pattern>
    </filter-mapping>
    <!--app过滤-->
    <filter>
        <filter-name>AppFilter</filter-name>
        <filter-class>com.qxd.birth.web.filter.AppFilter</filter-class>
        <init-param>
            <param-name>notCheckURLList</param-name>
            <param-value>/app/login;</param-value>
        </init-param>
        <!--wensocket-->
        <async-supported>true</async-supported>
    </filter>
    <filter-mapping>
        <filter-name>AppFilter</filter-name>
        <url-pattern>/app/*</url-pattern>
    </filter-mapping>


    <!--error-page 的两种配置方法: 错误码,异常类型-->
    <error-page>
        <error-code>500</error-code>
        <location>/error.jsp</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.NullPointerException</exception-type>
        <location>/error.jsp</location>
    </error-page>
</web-app>
